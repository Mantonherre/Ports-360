name: CI

on:
  push:
    branches: ["**"]

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:24-dind
        options: >-
          --privileged
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: smartport
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready" --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install dev requirements
        run: pip install -r requirements-dev.txt
      - name: Install sensor simulator requirements
        run: pip install -r tools/sensor_sim/requirements.txt
      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client
      - name: Black format check
        run: black --check .
      - name: Ruff lint
        run: ruff check .
      - name: Run migrations
        env:
          PGUSER: postgres
          PGPASSWORD: smartport
          PGDATABASE: postgres
          PGHOST: localhost
        run: alembic -c services/timeseries/alembic.ini upgrade head
      - name: Run tests
        run: pytest -q
      # ---- Snyk security scan ----
      - name: Snyk scan (fail on HIGH)
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --sarif-file-output=snyk.sarif

      - name: Upload Snyk results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif
      # ----------------------------
      - name: Build and run compose
        run: |
          docker compose up -d --build
          docker compose ps

  build_dashboard:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ui/dashboard
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '20'
      - run: npm ci
      - run: npm run build
      - run: npm run test -- --run

  observability_lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download promtool
        run: |
          set -eux
          PROM_VERSION="2.52.0"
          curl -sL https://github.com/prometheus/prometheus/releases/download/v${PROM_VERSION}/prometheus-${PROM_VERSION}.linux-amd64.tar.gz \
            | tar -xz --strip-components=1 prometheus-${PROM_VERSION}.linux-amd64/promtool
          sudo mv promtool /usr/local/bin/
          promtool --version
      - name: Prometheus lint
        run: promtool check config infra/prometheus/prometheus.yml
      - name: Grafana dashboard lint
        run: python -m json.tool infra/grafana/provisioning/dashboards/smartport_stats.json > /dev/null
